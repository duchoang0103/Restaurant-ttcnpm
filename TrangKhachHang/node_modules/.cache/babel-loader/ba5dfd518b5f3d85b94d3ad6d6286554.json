{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\NguyenDucTuan\\\\Desktop\\\\07-frontend-updating-a-post\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\NguyenDucTuan\\\\Desktop\\\\07-frontend-updating-a-post\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\NguyenDucTuan\\\\Desktop\\\\07-frontend-updating-a-post\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\NguyenDucTuan\\\\Desktop\\\\07-frontend-updating-a-post\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\NguyenDucTuan\\\\Desktop\\\\07-frontend-updating-a-post\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\NguyenDucTuan\\\\Desktop\\\\07-frontend-updating-a-post\\\\src\\\\pages\\\\Feed\\\\Food.js\";\nimport React, { Component, Fragment } from 'react'; // import Post from '../../components/Feed/Post/Post';\n// import Button from '../../components/Button/Button';\n// import FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\n// import Input from '../../components/Form/Input/Input';\n// import Paginator from '../../components/Paginator/Paginator';\n// import Loader from '../../components/Loader/Loader';\n// import ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\n\nimport './Food.css';\n\nvar Food = /*#__PURE__*/function (_Component) {\n  _inherits(Food, _Component);\n\n  function Food() {\n    _classCallCheck(this, Food);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Food).apply(this, arguments));\n  }\n\n  _createClass(Food, [{\n    key: \"render\",\n    // state = {\n    //   isEditing: false,\n    //   posts: [],\n    //   totalPosts: 0,\n    //   editPost: null,\n    //   status: '',\n    //   postPage: 1,\n    //   postsLoading: true,\n    //   editLoading: false\n    // };\n    // componentDidMount() {\n    //   fetch('URL')\n    //     .then(res => {\n    //       if (res.status !== 200) {\n    //         throw new Error('Failed to fetch user status.');\n    //       }\n    //       return res.json();\n    //     })\n    //     .then(resData => {\n    //       this.setState({ status: resData.status });\n    //     })\n    //     .catch(this.catchError);\n    //   this.loadPosts();\n    // }\n    // loadPosts = direction => {\n    //   if (direction) {\n    //     this.setState({ postsLoading: true, posts: [] });\n    //   }\n    //   let page = this.state.postPage;\n    //   if (direction === 'next') {\n    //     page++;\n    //     this.setState({ postPage: page });\n    //   }\n    //   if (direction === 'previous') {\n    //     page--;\n    //     this.setState({ postPage: page });\n    //   }\n    //   fetch('http://localhost:8080/feed/posts')\n    //     .then(res => {\n    //       if (res.status !== 200) {\n    //         throw new Error('Failed to fetch posts.');\n    //       }\n    //       return res.json();\n    //     })\n    //     .then(resData => {\n    //       this.setState({\n    //         posts: resData.posts.map(post => {\n    //           return {\n    //             ...post,\n    //             imagePath: post.imageUrl\n    //           };\n    //         }),\n    //         totalPosts: resData.totalItems,\n    //         postsLoading: false\n    //       });\n    //     })\n    //     .catch(this.catchError);\n    // };\n    // statusUpdateHandler = event => {\n    //   event.preventDefault();\n    //   fetch('URL')\n    //     .then(res => {\n    //       if (res.status !== 200 && res.status !== 201) {\n    //         throw new Error(\"Can't update status!\");\n    //       }\n    //       return res.json();\n    //     })\n    //     .then(resData => {\n    //       console.log(resData);\n    //     })\n    //     .catch(this.catchError);\n    // };\n    // newPostHandler = () => {\n    //   this.setState({ isEditing: true });\n    // };\n    // startEditPostHandler = postId => {\n    //   this.setState(prevState => {\n    //     const loadedPost = { ...prevState.posts.find(p => p._id === postId) };\n    //     return {\n    //       isEditing: true,\n    //       editPost: loadedPost\n    //     };\n    //   });\n    // };\n    // cancelEditHandler = () => {\n    //   this.setState({ isEditing: false, editPost: null });\n    // };\n    // finishEditHandler = postData => {\n    //   this.setState({\n    //     editLoading: true\n    //   });\n    //   const formData = new FormData();\n    //   formData.append('title', postData.title);\n    //   formData.append('content', postData.content);\n    //   formData.append('image', postData.image);\n    //   let url = 'http://localhost:8080/feed/post';\n    //   let method = 'POST';\n    //   if (this.state.editPost) {\n    //     url = 'http://localhost:8080/feed/post/' + this.state.editPost._id;\n    //     method = 'PUT';\n    //   }\n    //   fetch(url, {\n    //     method: method,\n    //     body: formData\n    //   })\n    //     .then(res => {\n    //       if (res.status !== 200 && res.status !== 201) {\n    //         throw new Error('Creating or editing a post failed!');\n    //       }\n    //       return res.json();\n    //     })\n    //     .then(resData => {\n    //       console.log(resData);\n    //       const post = {\n    //         _id: resData.post._id,\n    //         title: resData.post.title,\n    //         content: resData.post.content,\n    //         creator: resData.post.creator,\n    //         createdAt: resData.post.createdAt\n    //       };\n    //       this.setState(prevState => {\n    //         let updatedPosts = [...prevState.posts];\n    //         if (prevState.editPost) {\n    //           const postIndex = prevState.posts.findIndex(\n    //             p => p._id === prevState.editPost._id\n    //           );\n    //           updatedPosts[postIndex] = post;\n    //         } else if (prevState.posts.length < 2) {\n    //           updatedPosts = prevState.posts.concat(post);\n    //         }\n    //         return {\n    //           posts: updatedPosts,\n    //           isEditing: false,\n    //           editPost: null,\n    //           editLoading: false\n    //         };\n    //       });\n    //     })\n    //     .catch(err => {\n    //       console.log(err);\n    //       this.setState({\n    //         isEditing: false,\n    //         editPost: null,\n    //         editLoading: false,\n    //         error: err\n    //       });\n    //     });\n    // };\n    // statusInputChangeHandler = (input, value) => {\n    //   this.setState({ status: value });\n    // };\n    // deletePostHandler = postId => {\n    //   this.setState({ postsLoading: true });\n    //   fetch('URL')\n    //     .then(res => {\n    //       if (res.status !== 200 && res.status !== 201) {\n    //         throw new Error('Deleting a post failed!');\n    //       }\n    //       return res.json();\n    //     })\n    //     .then(resData => {\n    //       console.log(resData);\n    //       this.setState(prevState => {\n    //         const updatedPosts = prevState.posts.filter(p => p._id !== postId);\n    //         return { posts: updatedPosts, postsLoading: false };\n    //       });\n    //     })\n    //     .catch(err => {\n    //       console.log(err);\n    //       this.setState({ postsLoading: false });\n    //     });\n    // };\n    // errorHandler = () => {\n    //   this.setState({ error: null });\n    // };\n    // catchError = error => {\n    //   this.setState({ error: error });\n    // };\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 7\n        }\n      }, \"TU\\u1EA5n \\u0111\\xE3 v\\xE0o \\u0111\\xE2y trang FeedPage\", /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }\n      }, \"D\\xE2y l\\xE0 userId\", this.props.userId)) // <Fragment>\n      //   <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\n      //   <FeedEdit\n      //     editing={this.state.isEditing}\n      //     selectedPost={this.state.editPost}\n      //     loading={this.state.editLoading}\n      //     onCancelEdit={this.cancelEditHandler}\n      //     onFinishEdit={this.finishEditHandler}\n      //   />\n      //   <section className=\"feed__status\">\n      //     <form onSubmit={this.statusUpdateHandler}>\n      //       <Input\n      //         type=\"text\"\n      //         placeholder=\"Your status\"\n      //         control=\"input\"\n      //         onChange={this.statusInputChangeHandler}\n      //         value={this.state.status}\n      //       />\n      //       <Button mode=\"flat\" type=\"submit\">\n      //         Update\n      //       </Button>\n      //     </form>\n      //   </section>\n      //   <section className=\"feed__control\">\n      //     <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler}>\n      //       New Post\n      //     </Button>\n      //   </section>\n      //   <section className=\"feed\">\n      //     {this.state.postsLoading && (\n      //       <div style={{ textAlign: 'center', marginTop: '2rem' }}>\n      //         <Loader />\n      //       </div>\n      //     )}\n      //     {this.state.posts.length <= 0 && !this.state.postsLoading ? (\n      //       <p style={{ textAlign: 'center' }}>No posts found.</p>\n      //     ) : null}\n      //     {!this.state.postsLoading && (\n      //       <Paginator\n      //         onPrevious={this.loadPosts.bind(this, 'previous')}\n      //         onNext={this.loadPosts.bind(this, 'next')}\n      //         lastPage={Math.ceil(this.state.totalPosts / 2)}\n      //         currentPage={this.state.postPage}\n      //       >\n      //         {this.state.posts.map(post => (\n      //           <Post\n      //             key={post._id}\n      //             id={post._id}\n      //             author={post.creator.name}\n      //             date={new Date(post.createdAt).toLocaleDateString('en-US')}\n      //             title={post.title}\n      //             image={post.imageUrl}\n      //             content={post.content}\n      //             onStartEdit={this.startEditPostHandler.bind(this, post._id)}\n      //             onDelete={this.deletePostHandler.bind(this, post._id)}\n      //           />\n      //         ))}\n      //       </Paginator>\n      //     )}\n      //   </section>\n      // </Fragment>\n      ;\n    }\n  }]);\n\n  return Food;\n}(Component);\n\nexport default Food;","map":{"version":3,"sources":["C:/Users/NguyenDucTuan/Desktop/07-frontend-updating-a-post/src/pages/Feed/Food.js"],"names":["React","Component","Fragment","Food","props","userId"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;IAEMC,I;;;;;;;;;;;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;6BAES;AACP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAiB,KAAKC,KAAL,CAAWC,MAA5B,CADF,CADF,CAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEF;AAmED;;;;EAtQgBJ,S;;AAyQnB,eAAeE,IAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\n\n// import Post from '../../components/Feed/Post/Post';\n// import Button from '../../components/Button/Button';\n// import FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\n// import Input from '../../components/Form/Input/Input';\n// import Paginator from '../../components/Paginator/Paginator';\n// import Loader from '../../components/Loader/Loader';\n// import ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Food.css';\n\nclass Food extends Component {\n  // state = {\n  //   isEditing: false,\n  //   posts: [],\n  //   totalPosts: 0,\n  //   editPost: null,\n  //   status: '',\n  //   postPage: 1,\n  //   postsLoading: true,\n  //   editLoading: false\n  // };\n\n  // componentDidMount() {\n  //   fetch('URL')\n  //     .then(res => {\n  //       if (res.status !== 200) {\n  //         throw new Error('Failed to fetch user status.');\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(resData => {\n  //       this.setState({ status: resData.status });\n  //     })\n  //     .catch(this.catchError);\n\n  //   this.loadPosts();\n  // }\n\n  // loadPosts = direction => {\n  //   if (direction) {\n  //     this.setState({ postsLoading: true, posts: [] });\n  //   }\n  //   let page = this.state.postPage;\n  //   if (direction === 'next') {\n  //     page++;\n  //     this.setState({ postPage: page });\n  //   }\n  //   if (direction === 'previous') {\n  //     page--;\n  //     this.setState({ postPage: page });\n  //   }\n  //   fetch('http://localhost:8080/feed/posts')\n  //     .then(res => {\n  //       if (res.status !== 200) {\n  //         throw new Error('Failed to fetch posts.');\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(resData => {\n  //       this.setState({\n  //         posts: resData.posts.map(post => {\n  //           return {\n  //             ...post,\n  //             imagePath: post.imageUrl\n  //           };\n  //         }),\n  //         totalPosts: resData.totalItems,\n  //         postsLoading: false\n  //       });\n  //     })\n  //     .catch(this.catchError);\n  // };\n\n  // statusUpdateHandler = event => {\n  //   event.preventDefault();\n  //   fetch('URL')\n  //     .then(res => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error(\"Can't update status!\");\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(resData => {\n  //       console.log(resData);\n  //     })\n  //     .catch(this.catchError);\n  // };\n\n  // newPostHandler = () => {\n  //   this.setState({ isEditing: true });\n  // };\n\n  // startEditPostHandler = postId => {\n  //   this.setState(prevState => {\n  //     const loadedPost = { ...prevState.posts.find(p => p._id === postId) };\n\n  //     return {\n  //       isEditing: true,\n  //       editPost: loadedPost\n  //     };\n  //   });\n  // };\n\n  // cancelEditHandler = () => {\n  //   this.setState({ isEditing: false, editPost: null });\n  // };\n\n  // finishEditHandler = postData => {\n  //   this.setState({\n  //     editLoading: true\n  //   });\n  //   const formData = new FormData();\n  //   formData.append('title', postData.title);\n  //   formData.append('content', postData.content);\n  //   formData.append('image', postData.image);\n  //   let url = 'http://localhost:8080/feed/post';\n  //   let method = 'POST';\n  //   if (this.state.editPost) {\n  //     url = 'http://localhost:8080/feed/post/' + this.state.editPost._id;\n  //     method = 'PUT';\n  //   }\n\n  //   fetch(url, {\n  //     method: method,\n  //     body: formData\n  //   })\n  //     .then(res => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error('Creating or editing a post failed!');\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(resData => {\n  //       console.log(resData);\n  //       const post = {\n  //         _id: resData.post._id,\n  //         title: resData.post.title,\n  //         content: resData.post.content,\n  //         creator: resData.post.creator,\n  //         createdAt: resData.post.createdAt\n  //       };\n  //       this.setState(prevState => {\n  //         let updatedPosts = [...prevState.posts];\n  //         if (prevState.editPost) {\n  //           const postIndex = prevState.posts.findIndex(\n  //             p => p._id === prevState.editPost._id\n  //           );\n  //           updatedPosts[postIndex] = post;\n  //         } else if (prevState.posts.length < 2) {\n  //           updatedPosts = prevState.posts.concat(post);\n  //         }\n  //         return {\n  //           posts: updatedPosts,\n  //           isEditing: false,\n  //           editPost: null,\n  //           editLoading: false\n  //         };\n  //       });\n  //     })\n  //     .catch(err => {\n  //       console.log(err);\n  //       this.setState({\n  //         isEditing: false,\n  //         editPost: null,\n  //         editLoading: false,\n  //         error: err\n  //       });\n  //     });\n  // };\n\n  // statusInputChangeHandler = (input, value) => {\n  //   this.setState({ status: value });\n  // };\n\n  // deletePostHandler = postId => {\n  //   this.setState({ postsLoading: true });\n  //   fetch('URL')\n  //     .then(res => {\n  //       if (res.status !== 200 && res.status !== 201) {\n  //         throw new Error('Deleting a post failed!');\n  //       }\n  //       return res.json();\n  //     })\n  //     .then(resData => {\n  //       console.log(resData);\n  //       this.setState(prevState => {\n  //         const updatedPosts = prevState.posts.filter(p => p._id !== postId);\n  //         return { posts: updatedPosts, postsLoading: false };\n  //       });\n  //     })\n  //     .catch(err => {\n  //       console.log(err);\n  //       this.setState({ postsLoading: false });\n  //     });\n  // };\n\n  // errorHandler = () => {\n  //   this.setState({ error: null });\n  // };\n\n  // catchError = error => {\n  //   this.setState({ error: error });\n  // };\n\n  render() {\n    return (\n      <div>TUấn đã vào đây trang FeedPage\n        <p>Dây là userId{this.props.userId }</p>\n\n      </div>\n      // <Fragment>\n      //   <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\n      //   <FeedEdit\n      //     editing={this.state.isEditing}\n      //     selectedPost={this.state.editPost}\n      //     loading={this.state.editLoading}\n      //     onCancelEdit={this.cancelEditHandler}\n      //     onFinishEdit={this.finishEditHandler}\n      //   />\n      //   <section className=\"feed__status\">\n      //     <form onSubmit={this.statusUpdateHandler}>\n      //       <Input\n      //         type=\"text\"\n      //         placeholder=\"Your status\"\n      //         control=\"input\"\n      //         onChange={this.statusInputChangeHandler}\n      //         value={this.state.status}\n      //       />\n      //       <Button mode=\"flat\" type=\"submit\">\n      //         Update\n      //       </Button>\n      //     </form>\n      //   </section>\n      //   <section className=\"feed__control\">\n      //     <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler}>\n      //       New Post\n      //     </Button>\n      //   </section>\n      //   <section className=\"feed\">\n      //     {this.state.postsLoading && (\n      //       <div style={{ textAlign: 'center', marginTop: '2rem' }}>\n      //         <Loader />\n      //       </div>\n      //     )}\n      //     {this.state.posts.length <= 0 && !this.state.postsLoading ? (\n      //       <p style={{ textAlign: 'center' }}>No posts found.</p>\n      //     ) : null}\n      //     {!this.state.postsLoading && (\n      //       <Paginator\n      //         onPrevious={this.loadPosts.bind(this, 'previous')}\n      //         onNext={this.loadPosts.bind(this, 'next')}\n      //         lastPage={Math.ceil(this.state.totalPosts / 2)}\n      //         currentPage={this.state.postPage}\n      //       >\n      //         {this.state.posts.map(post => (\n      //           <Post\n      //             key={post._id}\n      //             id={post._id}\n      //             author={post.creator.name}\n      //             date={new Date(post.createdAt).toLocaleDateString('en-US')}\n      //             title={post.title}\n      //             image={post.imageUrl}\n      //             content={post.content}\n      //             onStartEdit={this.startEditPostHandler.bind(this, post._id)}\n      //             onDelete={this.deletePostHandler.bind(this, post._id)}\n      //           />\n      //         ))}\n      //       </Paginator>\n      //     )}\n      //   </section>\n      // </Fragment>\n    );\n  }\n}\n\nexport default Food;\n"]},"metadata":{},"sourceType":"module"}